generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  COMIMSUP_ADMIN
  COMRJ_ADMIN
  USER
  FORNECEDOR
}

/// Represents a user in the system
model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  isActive           Boolean   @default(true)
  role               UserRole  @default(USER)
  password           String
  mustChangePassword Boolean   @default(true)
  whatsapp           String?

  auditLogs AuditLog[]

  appointments Appointment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lastLogin DateTime?

  address String?
  cnpj    String?

  organizationId      String?
  organization        Organization?         @relation(fields: [organizationId], references: [id])
  PasswordResetToken  PasswordResetToken[]
  AppointmentActivity AppointmentActivity[]
  Chat                Chat[]

  @@index([email])
  @@index([organizationId])
}

/// Stores email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@index([token])
}

/// Represents different roles in the organization
enum OMRole {
  COMIMSUP
  COMRJ
  DEPOSITO
}

model Organization {
  id    String @id @default(cuid())
  name  String
  sigla String @unique

  description String?
  isActive    Boolean @default(true)

  comimsupId String?
  comimsup   Organization? @relation("ComimsupRelation", fields: [comimsupId], references: [id])

  role OMRole @default(DEPOSITO)

  militares User[]

  deliveryTypes DeliveryType[]
  appointments  Appointment[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  Organization Organization[] @relation("ComimsupRelation")
  Availability Availability[]
  Account      Account[]

  @@index([sigla])
}

model Account {
  id                  String  @id @default(cuid())
  organizationId      String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([provider, provider_account_id])
  @@index([organizationId])
  @@map("accounts")
}

/// Represents different types of deliveries
model DeliveryType {
  id          String  @id @default(cuid())
  name        String
  description String?

  slug     String  @unique
  isActive Boolean @default(true)

  availability         Availability[]
  availabilityRules    AvailabilityRule?
  AvailabilitySettings AvailabilitySettings?

  appointments Appointment[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([organizationId])
}

/// Represents availability slots for deliveries
model Availability {
  id String @id @default(cuid())

  weekDay   Int @db.SmallInt
  startTime Int
  endTime   Int

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  deliveryTypeId String
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  @@index([organizationId])
  @@index([weekDay])
}

model AvailabilitySettings {
  id String @id @default(cuid())

  duration       Int     @default(60) @db.SmallInt
  isActive       Boolean @default(true)
  lunchTimeStart Int     @default(720) @db.SmallInt
  lunchTimeEnd   Int     @default(780) @db.SmallInt

  deliveryTypeId String       @unique
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Stores rules for availability slots
model AvailabilityRule {
  id String @id @default(cuid())

  rule Json

  deliveryTypeId String       @unique
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

/// Represents all possible statuses for an appointment.
/// The initial status is PENDING_CONFIRMATION.
enum AppointmentStatus {
  PENDING_CONFIRMATION // Pendente de Confirmação
  CONFIRMED // Confirmado
  REJECTED // Rejeitado
  CANCELLATION_REQUESTED // Pedido de Cancelamento
  CANCELLATION_REJECTED // Pedido de Cancelamento Rejeitado
  CANCELLED // Cancelado
  RESCHEDULE_REQUESTED // Reagendamento Solicitado
  RESCHEDULE_CONFIRMED // Reagendamento Confirmado
  RESCHEDULE_REJECTED // Reagendamento Rejeitado
  RESCHEDULED // Reagendado
  COMPLETED // Concluído
  SUPPLIER_NO_SHOW // Fornecedor Não Compareceu
}

/// Represents scheduled appointments
model Appointment {
  id         String @id @default(cuid())
  internalId String @unique

  date     DateTime
  duration Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  deliveryTypeId String
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  ordemDeCompra String @unique
  observations  Json?

  status AppointmentStatus @default(PENDING_CONFIRMATION)

  activities AppointmentActivity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([organizationId])
  @@index([deliveryTypeId])
  @@index([date])
  @@index([internalId])
}

/// Represents different types of activities that can be performed on an appointment
enum ActivityType {
  CREATED
  UPDATED
  CANCELLED
  COMPLETED
  COMMENT
  STATUS_CHANGE
  ASSIGNED
  UNASSIGNED
  RESCHEDULE_REQUESTED
  RESCHEDULE_CONFIRMED
  RESCHEDULE_REJECTED
  SUPPLIER_NO_SHOW
  DELIVERY_CONFIRMED
  DELIVERY_REJECTED
  OTHER
}

/// Tracks all activities and changes related to an appointment
model AppointmentActivity {
  id       String       @id @default(cuid())
  type     ActivityType
  title    String
  content  String?
  metadata Json? // Additional data specific to the activity type

  // Appointment relationship
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  // User who performed the activity
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Additional fields for better tracking
  previousStatus AppointmentStatus? // Previous status before the change
  newStatus      AppointmentStatus? // New status after the change
  priority       Int?               @default(0) // Priority level of the activity
  isInternal     Boolean            @default(false) // Whether this is an internal note
  isVisible      Boolean            @default(true) // Whether this should be visible to users

  // Self-referencing relationship for replies
  parentId String?
  parent   AppointmentActivity?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  AppointmentActivity[] @relation("Replies")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for better query performance
  @@index([appointmentId])
  @@index([userId])
  @@index([createdAt])
  @@index([type])
  @@index([isInternal])
  @@index([isVisible])
  @@index([parentId])
}

/// Represents different types of audit actions
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPOINTMENT
  OTHER
}

/// Stores audit logs for system actions
model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User information
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Action details
  action    AuditAction
  entity    String // The type of entity being audited (e.g., "User", "OM", "DeliveryType")
  entityId  String? // The ID of the entity being audited
  details   String? // Additional details about the action
  ipAddress String? // IP address of the user
  userAgent String? // User agent/browser information

  // Resource information
  oldValues Json? // Previous values before the change
  newValues Json? // New values after the change

  // Metadata
  status   String? // Success, failure, or other status
  error    String? // Error message if any
  metadata Json? // Additional metadata in JSON format

  @@index([userId])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model Chat {
  id    String  @id @default(cuid())
  title String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  role      String
  content   String?
  createdAt DateTime @default(now())

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id])

  toolInvocations Json?
}
