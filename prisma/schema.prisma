// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

/// Represents a user in the system
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  role          UserRole  @default(USER)

  accounts  Account[]
  auditLogs AuditLog[]

  schedules Schedule[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([email])
  @@index([organizationId])
}

/// Represents OAuth accounts linked to users
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

/// Stores email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
  @@index([token])
}

/// Represents different roles in the organization
enum OMRole {
  CSUP
  COMRJ
  DEPOSITO
}

/// Represents an organizational unit
model Organization {
  id    String @id @default(cuid())
  name  String
  sigla String @unique

  description String?
  isActive    Boolean @default(true)

  role OMRole @default(DEPOSITO)

  militares User[]

  deliveryTypes  DeliveryType[]
  availabilities Availability[]
  schedules      Schedule[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([sigla])
}

/// Represents different types of deliveries
model DeliveryType {
  id          String  @id @default(cuid())
  name        String
  description String?

  slug     String  @unique
  isActive Boolean @default(true)

  availability Availability?
  schedules    Schedule[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([organizationId])
}

/// Represents availability slots for deliveries
model Availability {
  id        String   @id @default(cuid())
  weekDay   Int      @db.SmallInt
  startTime DateTime
  endTime   DateTime
  isActive  Boolean  @default(true)

  deliveryTypeId String       @unique
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  availabilityRule AvailabilityRule?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([organizationId])
  @@index([weekDay])
}

/// Stores rules for availability slots
model AvailabilityRule {
  id String @id @default(cuid())

  rule Json

  availabilityId String       @unique
  availability   Availability @relation(fields: [availabilityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([availabilityId])
}

/// Represents scheduled deliveries
model Schedule {
  id     String         @id @default(cuid())
  date   DateTime
  status ScheduleStatus @default(PENDING)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  deliveryTypeId String
  deliveryType   DeliveryType @relation(fields: [deliveryTypeId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  observations Json
  isDeleted    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([organizationId])
  @@index([deliveryTypeId])
  @@index([date])
}

/// Represents the status of a schedule
enum ScheduleStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

/// Represents different types of audit actions
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  SCHEDULE
  OTHER
}

/// Stores audit logs for system actions
model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User information
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Action details
  action    AuditAction
  entity    String // The type of entity being audited (e.g., "User", "OM", "DeliveryType")
  entityId  String? // The ID of the entity being audited
  details   String? // Additional details about the action
  ipAddress String? // IP address of the user
  userAgent String? // User agent/browser information

  // Resource information
  oldValues Json? // Previous values before the change
  newValues Json? // New values after the change

  // Metadata
  status   String? // Success, failure, or other status
  error    String? // Error message if any
  metadata Json? // Additional metadata in JSON format

  @@index([userId])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
}
